# -*- coding: utf-8 -*-
"""TASK3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bObCj3pClPpq6sbjOHL4unokXjPY_-p0
"""

from google.colab  import drive
drive.mount('/content/drive')

import numpy as n
import pandas as p
from sklearn.cluster import KMeans
import matplotlib.pyplot as plot
import seaborn as s

file=p.read_csv('/content/drive/MyDrive/IRIS.csv')
file.head()

file['species'],categories=p.factorize(file['species'])
file.head()

file.describe()

from mpl_toolkits.mplot3d import Axes3D
f=plot.figure()
a=f.add_subplot(111,projection='3d')
a.scatter(file.petal_length,file.petal_width,file.species)
a.set_xlabel('Petal Length')
a.set_ylabel('Petal Width')
a.set_zlabel('Species')
plot.title('3D scatter Plot')
plot.show()

from mpl_toolkits.mplot3d import Axes3D
f=plot.figure()
a=f.add_subplot(111,projection='3d')
a.scatter(file.sepal_length,file.sepal_width,file.species)
a.set_xlabel('Sepal Length')
a.set_ylabel('Sepal Width')
a.set_zlabel('Species')
plot.title('3D scatter Plot')
plot.show()



s.scatterplot(data=file,x="petal_length",y="petal_width",hue="species");

s.scatterplot(data=file,x="sepal_length",y="sepal_width",hue="species");

krng=range(1,10)
sse=[]

for k in krng:
  km=KMeans(n_clusters=k)
  km.fit(file[['petal_length','petal_width']])
  sse.append(km.inertia_)

plot.xlabel('krng')
plot.ylabel('Sum of squared errors')
plot.plot(krng,sse)

from sklearn.cluster import KMeans
km=KMeans(n_clusters=3,random_state=0,)
y_predicted=km.fit_predict(file[['petal_length','petal_width']])
y_predicted

file['cluster']=y_predicted
file.head(150)

from sklearn.metrics import confusion_matrix
c=confusion_matrix(file.species,file.cluster)
c

tl=file.species
pl=file.cluster
cm=confusion_matrix(tl,pl)
cl=['Setosa','versicolor','virginica']

plot.imshow(cm,interpolation='nearest',cmap=plot.cm.Blues)
plot.title('Confusion Matrix')
plot.colorbar()
tick_marks=n.arange(len(cl))
plot.xticks(tick_marks,cl)
plot.yticks(tick_marks,cl)

for i in range(len(cl)):
  for j in range(len(cl)):
    plot.text(j,i,str(c[i][j]),ha='center',va='center',color='white')

plot.xlabel('Predicted Label')
plot.ylabel('True Label')
plot.show()